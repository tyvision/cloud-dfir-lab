# Test with
# ansible-playbook --check -i inventory.yml deploy.yml
#
# Run with
# ansible-playbook -i inventory.yml deploy.yml
#
---
- name: Configure laboratory for Cloud Digital Forencics Incident Responce

  hosts: group_logcollectors

  vars:
      v_proj: "~/cloud-dfir"
      v_aws_env: "aws-credentials.sh"

  tasks:
    - name: Install pre-requisites
      become: yes
      apt:
        update_cache: yes
        pkg:
          - python3-pip
          - docker.io
          - docker-compose
          - iptables-persistent

    # Without this user can only run docker commands via SUDO
    # But running via SUDO means you can not pass env variables
    # So the fix is to add user to group "docker"
    - name: Group docker exists
      become: yes
      group:
        name: docker
        state: present

    - name: Adding {{ ansible_user_id }} to group docker
      become: yes
      user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: yes

    - name: Create project directory
      file:
        path: "{{ v_proj }}"
        state: directory
        mode: '700'

    - name: Check if security config already exists {{ v_proj }}/{{ v_aws_env }}
      stat:
        path: "{{ v_proj }}/{{ v_aws_env }}"
      register: file_aws

    - name: Copy example security config
      copy:
        src: "{{ playbook_dir }}/../config/example-aws-credentials.sh"
        dest: "{{ v_proj }}/{{ v_aws_env }}"
      when: not file_aws.stat.exists

    - name: Set bash to read AWS security variables from security config
      lineinfile:
        dest: "~/.bashrc"
        regexp: "source.*{{ v_aws_env }}"
        insertafter: EOF
        line: "source {{ v_proj }}/{{ v_aws_env}}"

    - name: Copy docker configuration
      copy:
        src: "{{ playbook_dir }}/../docker/"
        dest: "{{ v_proj }}/docker/"

    # Must copy code, so a docker container can be build on the laboratory machine
    # Can not push pre-build container to registry, because code inside container must be private
    - name: Copy logcollector dependencies config
      copy:
        src: "{{ playbook_dir }}/../config/requirements.txt"
        dest: "{{ v_proj }}/config/"

    - name: Copy logcollector
      copy:
        src: "{{ playbook_dir }}/../logcollector/"
        dest: "{{ v_proj }}/logcollector/"
        mode: '700'

    # to flush iptables rules "iptables -F"
    # to view iptables rules "iptables -S DOCKER-USER"
    # for allow only ssh, see https://www.cyberciti.biz/tips/linux-iptables-4-block-all-incoming-traffic-but-allow-ssh.html
    # also note: https://docs.docker.com/network/iptables/#setting-the-default-bind-address-for-containers
    - name: Drop incoming connections if they are not SSH
      become: yes
      iptables:
        action: append
        chain: INPUT
        in_interface: eth0
        protocol: tcp
        ctstate: NEW
        destination_port: "!22"
        jump: DROP

    - name: Save iptables rules
      become: yes
      shell: "iptables-save > /etc/iptables/rules.v4"
      changed_when: false

    - name: "Please, set credentials manually post-install"
      debug:
        msg:
          - "To complete this deployment, manually set the environment variables"
          - "AWS_ACCESS_KEY_ID=XXX"
          - "AWS_SECRET_ACCESS_KEY=XXX"
          - "You can set them in {{ v_proj }}/{{ v_aws_env }} file, it will be sourced from ~/.bashrc automatically."

    - name: "Please, run docker-compose to start Timesketch services manually post-install"
      debug:
        msg:
          - "To complete this deployment, manually run 'docker-compose up' in {{ v_proj }}/docker directory"

    - name: "Please, create a new sketch in timesketch manually post-install"
      debug:
        msg:
          - "Complete this deployment by manually creating a new sketch in Timesketch"
          - "To access Timesketch you must tunnel HTTP over SSH"
          - "To tunnel local port 8000 to any remote port on remote machine, run:"
          - "ssh -i /path/to/private_key -D 8000 -q -C -N user@cloud-ip"
          - "Then configure your browser to use localhost:8000 as SOCKS proxy"
          - "Then access Timesketch web GUI at http://{{ ansible_default_ipv4.address }}:80"

